http 요청 url을 올바르게 입력했나요?
http 요청 메소드를 올바르게 입력했나요?
필요한 파라미터를 올바르게 입력했나요?(클라이언트 아이디, 시크릿 키 등등)
콜백 uri 등에 대한 입력이 올바르게 되어있나요?
웹서버를 사용한다면 외부 트래픽이 유입될 수 있도록 제한을 풀거나 저희 API 에 대해서 따로 제한을 푸셨나요?


자동이체를 실행할 때, 남극은행으로의 자동이체 작업이면 1초에 20건만 전송하는 이벤트 큐에 전달한다.
평균 1만건이므로 1초당 20건이면 평균 5000초 내로 작업을 완료할 수 있다.


A 장점 - 카드, 계좌 서비스 모두 캐쉬를 적용했기 때문에 자주 사용되는 서비스 데이터에 대해서 빠르게 서빙할 수 있게 됩니다. 2개 서비스 모두 캐쉬를 사용하기 때문에 카드, 계좌 서비스는 서로 비슷한 전송 속도를 보일 수 있습니다.
A 단점 - 2군데 모두 캐쉬를 사용하므로 각 서비스에 새로운 내용이 추가되거나 갱신되는 경우, 두 서비스의 캐쉬 모두 갱신해줘야 하는 문제가 있습니다. 너무 많은 데이터 수정이 있을 경우 오히려 캐쉬 갱신으로 인해 트래픽 처리가 느려질 수 있습니다. 

B 장점 - 클라이언트가 가계부를 자주 조회한다면 A보다 더 빠른 응답이 가능합니다. 가계부 캐시에서 바로 클라이언트로 정보를 전달하기 때문입니다.
B 단점 - A 단점과 마찬가지로 캐쉬 갱신으로 인해 많은 데이터 수정이 있을 경우 느려질 수 있는 단점이 있습니다. 특히 캐시를 갱신하기 위해서 카드, 계좌 서비스를 모두 조회해야하므로 A단점보다 더욱 느려질 수 있습니다.

C 장점 - 
C 단점 - 

4. 온라인 명함 조회수 어뷰징 막기
이번에 보험 설계사가 자신을 PR 할 수 있는 '온라인 명함 서비스'를 만들었습니다.
'온라인 명함 서비스'는 누구나 링크를 통해서 보험 설계사의 정보를 확인하고 상담신청 할 수 있는 웹서비스 입니다.

온라인 명함 서비스를 널리 알리기 위해서 온라인 명함 *UV(Unique Visitor) 100회 당 행운상자를 제공하는 이벤트를 만들었습니다.
해당 이벤트는 쿠키 기반으로 UV 카운팅하는 로직을 구현했습니다. 서버에서 쿠키를 발급하고 해당 쿠키를 가진 브라우저의 요청은 하루에 한 번만 카운팅 되도록 했습니다.

그런데 쿠키는 브라우저에서 쉽게 조작할 수 있습니다. 쿠키가 없는 요청은 새 쿠키가 발급되는 것을 이용하여, 조회수를 쉽게 늘리는 어뷰징이 가능한 상황입니다. 이 어뷰징을 막기 위해서 어떤 방법이 있을지 작성해 주세요.

* UV(Unique Visitor): 측정 기간 동안 중복을 제거한 순방문자 수  / 사용자수, 조회 기간에 방문한 유니크한 사람의 수 

-> 우선 홈페이지 자체의 쿠키에 httpOnly를 설정합니다.
쿠키에 하루의 만료기한을 걸어두고, 페이지 조회가 발생했을 시에 함께 전송된 쿠키에 자신이 접속한 페이지번호를 추가해 ex> _1 클라이언트로 전달합니다.

5. 실시간 거래량 기반 TOP 100 캐시 갱신
튼튼증권에서 실시간 거래량 상위 종목 랭킹을 노출하는 서비스를 준비하고 있습니다.
5분 간격으로 랭킹 데이터가 갱신되는 단순한 구조라, 개발자 김튼튼은 서버의 로컬 메모리에 캐싱을 하였습니다.

그런데 *상장폐지 된 종목 정보가 잘못 랭킹에 섞여 들어가는 사고가 발생했습니다!!
랭킹 데이터는 즉시 갱신하였지만, 각 서버의 로컬 메모리에 캐싱된 데이터는 갱신할 수 없어서 즉각적인 대응에 실패하였고,
일부 고객님들은 5분간 노출된 상장폐지 된 종목을 클릭하기도 하였습니다.

고객님들에게 호된 질타를 받은 후, 로컬 캐싱을 거의 동시에 (혹은 수 초 이내에) 갱신하는 방법을 준비하기로 마음 먹었습니다.
어떤 방법들을 활용해 볼 수 있을지 작성해 주세요.

[조건]

종목 정보는 언제든 수정될 수 있음. (종목 정보 어드민에서 수정)
TOP 100 종목과 랭킹은 db 에 적재되어 있음.
로컬 캐싱 방법의 제약은 없음, 따라서 자유롭게 구현 가능.
도구, 라이브러리 등의 제약 없음.
* 상장폐지 : 증권시장에 상장된 종목에 대한 상장 취소. 거래소를 통한 고객 거래가 불가능합니다.

-> 종목 정보가 수정되면 자동적으로 로컬 캐싱을 갱신하는 요청을 보내는 서비스를 만듭니다.
카프카와 같은 이벤트 큐를 사용해서 로컬 캐시와 해당 서비스를 연결합니다.
로컬 캐시는 카프카 이벤트를 단순히 컨슈밍해서 자신의 데이터를 갱신합니다.